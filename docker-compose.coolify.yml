# Docker Compose configuration optimized for Coolify deployment
# Coolify will handle environment variables and secrets

services:
  # Main chatbot application
  chatbot:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        - REACT_APP_AZURE_CLIENT_ID=${REACT_APP_AZURE_CLIENT_ID}
        - REACT_APP_AZURE_TENANT_ID=${REACT_APP_AZURE_TENANT_ID}
        - REACT_APP_REDIRECT_URI=${REACT_APP_REDIRECT_URI}
        - REACT_APP_N8N_WEBHOOK_URL=${REACT_APP_N8N_WEBHOOK_URL}
        - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
        - REACT_APP_WS_URL=${REACT_APP_WS_URL}
        - REACT_APP_WEBSOCKET_URL=${REACT_APP_WEBSOCKET_URL}
    expose:
      - "80"
    environment:
      - NODE_ENV=production
      - REACT_APP_N8N_WEBHOOK_URL=${REACT_APP_N8N_WEBHOOK_URL}
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
      - REACT_APP_WEBSOCKET_URL=${REACT_APP_WEBSOCKET_URL:-wss://chatbot.lumitec.ai/ws}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      # Coolify labels
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.port=80"

  # WebSocket server for workflow status updates
  websocket-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    expose:
      - "3001"
    environment:
      - WS_PORT=3001
      - NODE_ENV=production
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://chatbot.lumitec.ai}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      - chatbot
    labels:
      # Coolify labels
      - "coolify.managed=true"
      - "coolify.type=application"