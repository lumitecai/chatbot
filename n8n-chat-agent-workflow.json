{
  "name": "AI Chat Agent with OpenAI",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat-webhook",
        "authentication": "none",
        "responseMode": "responseNode",
        "options": {
          "cors": {
            "allowedOrigins": "*",
            "allowedHeaders": "*"
          }
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [250, 300],
      "webhookId": "chat-webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "session-id",
              "name": "sessionId",
              "value": "={{ $json.sessionId || $json.headers['x-session-id'] }}",
              "type": "string"
            },
            {
              "id": "user-id",
              "name": "userId",
              "value": "={{ $json.userId || $json.headers['x-user-id'] }}",
              "type": "string"
            },
            {
              "id": "messages",
              "name": "messages",
              "value": "={{ $json.messages || [] }}",
              "type": "array"
            },
            {
              "id": "current-message",
              "name": "currentMessage",
              "value": "={{ $json.messages ? $json.messages[$json.messages.length - 1].content : $json.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-data",
      "name": "Extract Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [450, 300]
    },
    {
      "parameters": {
        "model": "gpt-4-turbo-preview",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "You are a helpful AI assistant integrated with n8n. You provide clear, concise, and accurate responses. You maintain context from the conversation history and personalize responses based on the user's needs. Format your responses using markdown when appropriate."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 2000,
          "topP": 1,
          "frequencyPenalty": 0,
          "presencePenalty": 0,
          "timeout": 30000,
          "systemMessage": "Current session: {{ $('extract-data').item.json.sessionId }}\nUser: {{ $('extract-data').item.json.userId }}"
        },
        "text": "={{ $('extract-data').item.json.currentMessage }}",
        "hasOutputParser": true
      },
      "id": "ai-agent",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [650, 300]
    },
    {
      "parameters": {
        "model": "gpt-4-turbo-preview",
        "options": {
          "temperature": 0.7,
          "maxTokens": 2000,
          "topP": 1
        }
      },
      "id": "openai-chat-model",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [650, 450],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this to search the web for current information, news, or any topic the user asks about that might require up-to-date data.",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "tavilyApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            },
            {
              "name": "max_results",
              "value": "5"
            }
          ]
        },
        "headers": {
          "entries": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "web-search-tool",
      "name": "Web Search Tool",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [850, 450]
    },
    {
      "parameters": {
        "content": "## Conversation Memory\n\nThis node stores conversation history for the session",
        "height": 80,
        "width": 200
      },
      "id": "memory-note",
      "name": "Memory Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [450, 450]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('extract-data').item.json.sessionId }}",
        "contextWindowLength": 10
      },
      "id": "conversation-memory",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [450, 550]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "response-id",
              "name": "id",
              "value": "={{ 'msg-' + Date.now() }}",
              "type": "string"
            },
            {
              "id": "response-content",
              "name": "content",
              "value": "={{ $json.output }}",
              "type": "string"
            },
            {
              "id": "response-timestamp",
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}",
              "type": "string"
            },
            {
              "id": "response-role",
              "name": "role",
              "value": "assistant",
              "type": "string"
            },
            {
              "id": "response-metadata",
              "name": "metadata",
              "value": "={{ { sessionId: $('extract-data').item.json.sessionId, userId: $('extract-data').item.json.userId, model: 'gpt-4-turbo-preview' } }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [850, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Session-ID",
                "value": "={{ $('extract-data').item.json.sessionId }}"
              }
            ]
          }
        }
      },
      "id": "webhook-response",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.error }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Error"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "error-check",
      "name": "Check for Errors",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [850, 150]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-response",
              "name": "error",
              "value": "={{ { message: 'An error occurred processing your request', details: $json.error } }}",
              "type": "object"
            },
            {
              "id": "error-timestamp",
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-error",
      "name": "Format Error",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1050, 150]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 500,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1250, 150]
    }
  ],
  "connections": {
    "webhook-trigger": {
      "main": [
        [
          {
            "node": "extract-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract-data": {
      "main": [
        [
          {
            "node": "ai-agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ai-agent": {
      "main": [
        [
          {
            "node": "error-check",
            "type": "main",
            "index": 0
          },
          {
            "node": "format-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai-chat-model": {
      "ai_languageModel": [
        [
          {
            "node": "ai-agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "web-search-tool": {
      "ai_tool": [
        [
          {
            "node": "ai-agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "conversation-memory": {
      "ai_memory": [
        [
          {
            "node": "ai-agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "format-response": {
      "main": [
        [
          {
            "node": "webhook-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "error-check": {
      "main": [
        [
          {
            "node": "format-error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format-error": {
      "main": [
        [
          {
            "node": "error-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "01234567-89ab-cdef-0123-456789abcdef",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "n8n-instance-id"
  },
  "id": "chat-agent-workflow",
  "tags": [
    {
      "id": "1",
      "name": "AI Agent"
    },
    {
      "id": "2", 
      "name": "OpenAI"
    },
    {
      "id": "3",
      "name": "Chat"
    }
  ]
}